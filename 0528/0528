--25.
--1) WITH 절을 이용하여 정교수만 모여있는 가상테이블 하나와 일반과목(과목명에 일반이 포함되는)들이 모여있는 가상테이블 하나를 생성하여 
--   일반과목들을 강의하는 교수의 정보 조회하세요.(과목번호, 과목명, 교수번호, 교수이름)
WITH JUNG_P AS(
	SELECT *
		 FROM PROFESSOR
		 WHERE ORDERS = '정교수'
),REGULAR_C AS(
	SELECT *
		 FROM COURSE
		 WHERE CNAME LIKE '%일반%'
)
SELECT REGULAR_C.CNO
	 , REGULAR_C.CNAME
	 , JUNG_P.PNO
	 , JUNG_P.PNAME
	 FROM JUNG_P
	 JOIN REGULAR_C
	   ON REGULAR_C.PNO=JUNG_P.PNO
	   
--2) WITH 절을 이용하여 급여가 3000이상인 사원정보를 갖는 가상테이블 하나와 보너스가 500이상인 사원정보를 갖는 가상테이블 하나를 생성하여
--   두 테이블에 모두 속해있는 사원의 정보를 모두 조회하세요.
WITH OVER3000 AS (
	SELECT *
		 FROM EMP
		 WHERE SAL>=3000
), OVER OVER500 AS (
	SELECT *
		 FROM EMP
		 WHERE COMM>=500
)
SELECT *
	 FROM OVER3000
	 JOIN OVER500
	   ON OVER3000.ENO = OVER500.ENO;



--3) WITH 절을 이용하여 평점이 3.3이상인 학생의 목록을 갖는 가상테이블 하나와 학생별 기말고사 평균점수를 갖는 가상테이블 하나를 생성하여
--   평점이 3.3이상인 학생의 기말고사 평균 점수를 조회하세요.
WITH GOOD_ST AS(
	SELECT SNO
		 , AVR
		 FROM STUDENT
		 WHERE AVR>=3.3
), AVG_RESULT AS(
	SELECT SNO
		 , AVG(RESULT) AS AVGG
		 FROM SCORE
		 GROUP BY SNO
)
SELECT AVG(AVG_RESULT.AVGG)
	 FROM GOOD_ST
	 JOIN AVG_RESULT
	   ON AVG_RESULT.SNO = GOOD_ST.SNO
	   
--4) WITH 절을 이용하여 부임일자가 25년이상된 교수정보를 갖는 가상테이블 하나와 과목번호, 과목명, 학생번호, 학생이름, 교수번호, 기말고사성적을
--   갖는 가상테이블 하나를 생성하여 기말고사 성적이 90이상인 과목번호, 과목명, 학생번호, 학생이름, 교수번호, 교수이름, 기말고사성적을 조회하세요.
WITH OVER25 AS (
	SELECT *
		 FROM PROFESSOR
		 WHERE ADD_MONTHS(HIREDATE,300)<=SYSDATE 
), INFO AS (
	SELECT C.CNO
		 , C.CNAME
		 , ST.SNO
		 , ST.SNAME
		 , P.PNAME
		 , SC.RESULT
		 FROM COURSE c
		 JOIN SCORE SC
		   ON C.CNO=SC.CNO
		 JOIN STUDENT ST
		   ON ST.SNO=SC.CNO
		 JOIN PROFESSOR p 
		   ON P.PNO=C.PNO
)
SELECT *
	 FROM INFO
	 JOIN OVER25
	   ON OVER25.PNAME=INFO.PNAME
	 WHERE INFO.RESULT>=90 --값이 안나옴ㅇㅅㅇ?
	 
--26.
--1) STUDENT 테이블을 참조하여 ST_TEMP 테이블을 만들고 모든 학생의 성적을 4.5만점 기준으로 수정하세요
CREATE TABLE ST_TEMP
	AS SELECT * FROM STUDENT;
COMMIT;

UPDATE ST_TEMP
	SET
		AVR=AVR/4.0*4.5;
COMMIT;

SELECT * FROM ST_TEMP;

--2) PROFESSOR 테이블을 참조하여 PF_TEMP 테이블을 만들고 모든 교수의 부임일자를 100일 앞으로 수정하세요
CREATE TABLE PF_TEMP
	AS SELECT * FROM PROFESSOR;
COMMIT;

UPDATE PF_TEMP
	SET
		HIREDATE=HIREDATE+100;
COMMIT;

SELECT * FROM PF_TEMP;

SELECT *
	FROM PF_TEMP
	AS OF TIMESTAMP(SYSTIMESTAMP - INTERVAL '1' MINUTE);

--3) ST_TEMP 테이블에서 화학과 2학년 학생의 정보를 삭제하세요
DELETE FROM ST_TEMP
	WHERE SYEAR =2
	  AND MAJOR = '화학';
COMMIT;

--4) PF_TEMP 테이블에서 조교수의 정보를 삭제하세요
DELETE FROM PF_TEMP
	WHERE ORDERS='조교수';
COMMIT;

--5) EMP 테이블을 참조하여 EMP2 테이블을 만들고 
-- DNO = 30인 사원의 보너스를 15프로 상승시킨 값으로 변경하시고
-- DNO = 10인 사원의 보너스를 5프로 상승시킨 값으로 변경, 
-- DNO = 20인 사원의 급여를 10프로 상승시킨 값으로 변경하세요.
CREATE TABLE EMP2
	AS SELECT * FROM EMP;
COMMIT;

UPDATE EMP2
	SET
		COMM=COMM*1.15
	WHERE DNO = 30;
	
UPDATE EMP2
	SET
		COMM=COMM*1.05
	WHERE DNO = 10;
	
UPDATE EMP2
	SET
		COMM=COMM*1.1
	WHERE DNO = 20;
COMMIT;		
SELECT * FROM EMP2 ORDER BY DNO;

--6) 화학과 2학년 학생중 기말고사 성적의 등급이 A, B인 정보를 갖는 테이블 SCORE_STGR을 생성하세요.(SNO, SNAME, MAJOR, SYEAR, CNO, CNAME, RESULT, GRADE)
CREATE TABLE SCORE_STGR2(SNO, SNAME, MAJOR, SYEAR, CNO, CNAME, RESULT, GRADE)
	AS SELECT S.SNO, S.SNAME, S.MAJOR, S.SYEAR, C.CNO, C.CNAME, SC.RESULT, SG.GRADE
		FROM STUDENT S
		JOIN SCORE SC
		  ON SC.SNO=S.SNO
		JOIN COURSE C
		  ON C.CNO=SC.CNO
		JOIN SCGRADE SG
		  ON SC.RESULT BETWEEN SG.LOSCORE AND SG.HISCORE 
		WHERE S.MAJOR ='화학'
		  AND SYEAR =2
		  AND SG.GRADE IN ('A','B');
COMMIT;

SELECT * FROM SCORE_STGR2;

--7) 생물학과 학생중 평점이 2.7이상인 학생이 수강중인 과목의 정보를 갖는 테이블 ST_COURSEPF를 생성하세요. (SNO, SNAME, CNO, CNAME, PNO, PNAME, AVR)
CREATE TABLE ST_COURSEPF(SNO, SNAME, CNO, CNAME, PNO, PNAME, AVR)
	AS SELECT ST.SNO, ST.SNAME, C.CNO, C.CNAME, P.PNO, P.PNAME, ST.AVR
		FROM STUDENT ST
		JOIN SCORE SC
		  ON SC.SNO=ST.SNO
		JOIN COURSE C
		  ON C.CNO=SC.CNO
		JOIN PROFESSOR p 
		  ON P.PNO=C.PNO
		WHERE ST.MAJOR = '생물'
		  AND ST.AVR>=2.7;
COMMIT;

SELECT * FROM ST_COURSEPF;
		 

