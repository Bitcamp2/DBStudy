--35_CONSTRAINT_Question

--1) SCORE 테이블과 동일한 구조를 갖는 SCORE_CHK를 생성하고 RESULT 60이상 90이하만 입력 가능하도록 하세요.
CREATE TABLE SCORE_CHK(
	SNO VARCHAR2(8),
	CNO VARCHAR2(8),
	RESULT NUMBER(3, 0) CHECK(RESULT BETWEEN 60 AND 90)
);

SELECT *
	FROM SCORE;

				-- 1-4. CHECK: 컬럼에 저장되는 데이터에 조건을 달아주는 제약조건
				--			   CHECK가 지정되어 있는 컬럼의 데이터는 CHECK에 지정된 조건에 부합하는 데이터만 저장될 수 있다.
				--CREATE TABLE EMP_CHK(
				--	ENO NUMBER(4) PRIMARY KEY,
				--	ENAME VARCHAR2(20) UNIQUE,
				--	SAL NUMBER(5, 0) CHECK(SAL >= 3000),
				--	COMM NUMBER(5, 0),
				--	CONSTRAINT CHK_EMP_CHK_COMM CHECK(COMM BETWEEN 100 AND 1000)
				--);


--2) STUDENT 테이블과 동일한 구조를 갖는 STUDENT_COPY 테이블을 생성하면서 
--	SNO은 PK로 SNAME은 NOT NULL로 SYEAR의 DEFAULT는 1로 설정하세요.
CREATE TABLE STUDENT_COPY(
	SNO VARCHAR2(8) PRIMARY KEY,
	SNAME VARCHAR2(20) NOT NULL,
	SEX VARCHAR2(3),
	SYEAR NUMBER(1, 0) DEFAULT 1,
	MAJOR VARCHAR2(20),
	AVR NUMBER(4, 2)
);


--3) COURSE 테이블과 동일한 구조를 갖는 COURSE_CONSTRAINT 테이블을 생성하면서 
--	 CNO, CNAME을 PK로 
--	PNO은 PROFESSOR_PK의 PNO을 참조하여 FK로 설정하고 
--	ST_NUM은 DEFAULT 2로 설정하세요.
CREATE TABLE COURSE_CONSTRAINT(
	CNO VARCHAR2(8),
	CNAME VARCHAR2(20),
	ST_NUM NUMBER(1, 0) DEFAULT 2,
	PNO VARCHAR2(8) REFERENCES PROFESSOR_PK(PNO),
	CONSTRAINT PK_CC_CNO_CNAME PRIMARY KEY(CNO, CNAME)
);


						--CREATE TABLE PROFESSOR_PK(
						--	PNO VARCHAR2(8) PRIMARY KEY
						--);
						--ALTER TABLE PROFESSOR_PK
						--	DROP PRIMARY KEY;
						--
						--DROP TABLE PROFESSOR_PK;

--36_CREATETABLE_Question

--1) 다음 구조를 갖는 테이블을 생성하세요.
--PRODUCT 테이블 - PNO NUMBER PK              : 제품번호
--                PNMAE VARCHAR2(50)          : 제품이름
--                PRI NUMBER                  : 제품단가
CREATE TABLE PRODUCT(
	PNO NUMBER PRIMARY KEY,
	PNAME  VARCHAR2(50),
	PRI NUMBER
);

--PAYMENT 테이블 - MNO NUMBER PK              : 전표번호
--               PDATE DATE NOT NULL         : 판매일자
--                CNAME VARCHAR2(50) NOT NULL : 고객명
--                TOTAL NUMBER TOTAL > 0      : 총액
CREATE TABLE PAYMENT(
	MNO NUMBER PRIMARY KEY,
	PDATE DATE NOT NULL,
	CNAME VARCHAR2(50) NOT NULL,
	TOTAL NUMBER CHECK(TOTAL > 0)
);

--PAYMENT_DETAIL - MNO NUMBER PK FK           : 전표번호
--                PNO NUMBER PK FK            : 제품번호
--                AMOUNT NUMBER NOT NULL      : 수량
--                PRICE NUMBER NOT NULL       : 단가
--                TOTAL_PRICE NUMBER NOT NULL TOTAL_PRICE > 0 : 금액
CREATE TABLE PAYMENT_DETAIL(
	MNO NUMBER,
	PNO NUMBER,
	AMOUNT NUMBER NOT NULL,
	PRICE NUMBER NOT NULL,
	TOTAL_PRICE NUMBER NOT NULL CHECK(TOTAL_PRICE > 0),
	CONSTRAINT PK_PD_MNO_PNO PRIMARY KEY(MNO, PNO),
	CONSTRAINT FK_PD_MNO FOREIGN KEY(MNO) REFERENCES PAYMENT(MNO),
	CONSTRAINT FK_PD_PNO FOREIGN KEY(PNO) REFERENCES PRODUCT(PNO)
);

--37_PLSQL_Question

--1) 과목번호, 과목이름, 교수번호, 교수이름을 담을 수 있는 변수들을 선언하고 
--   유기화학 과목의 과목번호, 과목이름, 교수번호, 교수이름을 출력하세요.
DECLARE
	COURSE_CNO COURSE.CNO%TYPE;
	COURSE_CNAME COURSE.CNAME%TYPE;
	PROFESSOR_PNO PROFESSOR.PNO%TYPE;
	PROFESSOR_PNAME PROFESSOR.PNAME%TYPE;
BEGIN
	  SELECT C.CNO INTO COURSE_CNO
		FROM COURSE C
		JOIN PROFESSOR P
		  ON C.PNO = P.PNO
	   WHERE C.CNAME = '유기화학';
	  
	  SELECT C.CNAME INTO COURSE_CNAME
		FROM COURSE C
		JOIN PROFESSOR P
		  ON C.PNO = P.PNO
	   WHERE C.CNAME = '유기화학';
	  
	  SELECT P.PNO INTO PROFESSOR_PNO
		FROM PROFESSOR P
		JOIN COURSE C
		  ON C.PNO = P.PNO
	   WHERE C.CNAME = '유기화학';
	  
	  SELECT P.PNAME INTO PROFESSOR_PNAME
		FROM PROFESSOR P
		JOIN COURES C
		  ON C.PNO = P.PNO
	   WHERE C.CNAME = '유기화학';
	  
	  DBMS_OUTPUT.PUT_LINE(COURSE_CNO || COURSE_CNAME || 
	 PROFESSOR_PNO || PROFESSOR_PNAME);
END;

--2) 위 데이터들을 레코드로 선언하고 출력하세요.